{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// Configuration\nconst API_CONFIG = {\n  openai: {\n    url: 'https://api.openai.com/v1/chat/completions',\n    model: 'gpt-3.5-turbo'\n  },\n  huggingface: {\n    url: 'https://api-inference.huggingface.co/models/google/flan-t5-xxl'\n  },\n  local: {\n    url: 'http://localhost:5000/api/generate'\n  }\n};\n\n// Choose which API to use (you can make this configurable)\nconst CURRENT_API = 'openai'; // Change to 'huggingface' or 'local' as needed\n\n/**\r\n * Generates a recipe response using the selected API\r\n */\nexport const generateRecipeResponse = async (prompt, context) => {\n  try {\n    switch (CURRENT_API) {\n      case 'openai':\n        return await generateWithOpenAI(prompt, context);\n      case 'huggingface':\n        return await generateWithHuggingFace(prompt, context);\n      case 'local':\n        return await generateWithLocalAPI(prompt, context);\n      default:\n        return await generateWithOpenAI(prompt, context);\n    }\n  } catch (error) {\n    console.error('API Error:', error);\n    throw new Error('Failed to generate response. Please check your API configuration.');\n  }\n};\n\n/**\r\n * OpenAI API integration\r\n */\nconst generateWithOpenAI = async (prompt, context) => {\n  // Your OpenAI API key should be stored in environment variables\n  const API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\n  if (!API_KEY) {\n    throw new Error('OpenAI API key not configured. Please add REACT_APP_OPENAI_API_KEY to your environment variables.');\n  }\n  const systemMessage = `You are a helpful recipe assistant. You have access to:\n  - ${context.recipes.length} recipes in the user's collection\n  - ${context.files.length} uploaded files\n  \n  Provide helpful, concise responses about cooking, recipes, and food preparation.`;\n  const userMessage = buildPromptWithContext(prompt, context);\n  const response = await axios.post(API_CONFIG.openai.url, {\n    model: API_CONFIG.openai.model,\n    messages: [{\n      role: 'system',\n      content: systemMessage\n    }, {\n      role: 'user',\n      content: userMessage\n    }],\n    max_tokens: 500,\n    temperature: 0.7\n  }, {\n    headers: {\n      'Authorization': `Bearer ${API_KEY}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  return response.data.choices[0].message.content;\n};\n\n/**\r\n * Hugging Face API integration\r\n */\nconst generateWithHuggingFace = async (prompt, context) => {\n  const API_KEY = process.env.REACT_APP_HUGGINGFACE_API_KEY;\n  if (!API_KEY) {\n    throw new Error('Hugging Face API key not configured.');\n  }\n  const fullPrompt = buildPromptWithContext(prompt, context);\n  const response = await axios.post(API_CONFIG.huggingface.url, {\n    inputs: fullPrompt\n  }, {\n    headers: {\n      'Authorization': `Bearer ${API_KEY}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  return response.data[0].generated_text;\n};\n\n/**\r\n * Local API integration (for self-hosted models)\r\n */\nconst generateWithLocalAPI = async (prompt, context) => {\n  const fullPrompt = buildPromptWithContext(prompt, context);\n  const response = await axios.post(API_CONFIG.local.url, {\n    prompt: fullPrompt,\n    context: context\n  });\n  return response.data.response;\n};\n\n/**\r\n * Builds a comprehensive prompt with context from recipes and files\r\n */\nconst buildPromptWithContext = (prompt, context) => {\n  let contextMessage = `User question: ${prompt}\\n\\n`;\n\n  // Add recipe context\n  if (context.recipes.length > 0) {\n    contextMessage += \"Available recipes:\\n\";\n    context.recipes.slice(0, 3).forEach((recipe, index) => {\n      contextMessage += `${index + 1}. ${recipe.title} (${recipe.difficulty})\\n`;\n      contextMessage += `   Ingredients: ${recipe.ingredients.split('\\n').slice(0, 3).join(', ')}...\\n`;\n    });\n    contextMessage += \"\\n\";\n  }\n\n  // Add file context\n  if (context.files.length > 0) {\n    contextMessage += \"Uploaded files:\\n\";\n    context.files.slice(0, 5).forEach(file => {\n      contextMessage += `- ${file.name} (${file.type})\\n`;\n    });\n  }\n  return contextMessage;\n};\n\n/**\r\n * Fallback mock responses for development/demo\r\n */\nexport const generateMockResponse = (prompt, context) => {\n  // Enhanced mock responses based on prompt content\n  const promptLower = prompt.toLowerCase();\n  if (promptLower.includes('healthy') || promptLower.includes('diet')) {\n    return \"For healthier recipes, I recommend:\\n\\n1. Use olive oil instead of butter\\n2. Replace white flour with whole wheat\\n3. Add more vegetables to increase fiber\\n4. Reduce sugar by 25% and add spices like cinnamon\\n5. Bake instead of fry when possible\\n\\nWould you like me to modify a specific recipe?\";\n  }\n  if (promptLower.includes('quick') || promptLower.includes('fast') || promptLower.includes('easy')) {\n    return \"Here are some quick recipe ideas:\\n\\n• 15-minute pasta aglio e olio: garlic, olive oil, parsley, red pepper flakes\\n• 10-minute omelette with leftover vegetables\\n• 5-minute avocado toast with cherry tomatoes\\n• 20-minute stir-fry with pre-cut vegetables and tofu/chicken\\n\\nI can help you adapt any of your recipes to be quicker!\";\n  }\n  if (promptLower.includes('vegetarian') || promptLower.includes('vegan')) {\n    return \"For vegetarian/vegan options:\\n\\n• Replace meat with mushrooms, lentils, or tofu\\n• Use plant-based milk in baking\\n• Nutritional yeast adds cheesy flavor without dairy\\n• Aquafaba (chickpea liquid) can replace eggs in some recipes\\n\\nI'd be happy to help convert any of your recipes!\";\n  }\n  if (promptLower.includes('ingredient') || promptLower.includes('substitut')) {\n    return \"Common ingredient substitutions:\\n\\n• Buttermilk: 1 cup milk + 1 tbsp lemon juice/vinegar\\n• Baking powder: 1/4 tsp baking soda + 1/2 tsp cream of tartar\\n• Brown sugar: 1 cup white sugar + 1-2 tbsp molasses\\n• Tomato paste: ketchup (use 2x amount) or tomato sauce (reduce other liquids)\\n• Fresh herbs: use 1/3 amount of dried herbs\\n\\nWhat specific ingredient do you need to substitute?\";\n  }\n\n  // Context-aware responses\n  if (context.recipes.length > 0) {\n    const recipeNames = context.recipes.map(r => r.title).join(', ');\n    return `I see you have recipes for: ${recipeNames}. I can help you:\\n\\n• Modify these recipes for dietary needs\\n• Suggest similar recipes\\n• Create shopping lists\\n• Adjust cooking times or methods\\n\\nWhat would you like to know about your recipes?`;\n  }\n\n  // Default helpful responses\n  const defaultResponses = [\"I'd be happy to help with your cooking questions! What specific recipe or technique are you interested in?\", \"I can assist with recipe suggestions, cooking techniques, ingredient substitutions, and more. What would you like to know?\", \"As your recipe assistant, I can help you plan meals, adjust recipes, or solve cooking challenges. What do you need help with today?\", \"I notice you haven't added any recipes yet. I can help you create new recipes or suggest ideas based on ingredients you have!\", \"Let me know what you'd like to cook, and I'll help you with recipes, techniques, and tips to make it successful!\"];\n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n};","map":{"version":3,"names":["axios","API_CONFIG","openai","url","model","huggingface","local","CURRENT_API","generateRecipeResponse","prompt","context","generateWithOpenAI","generateWithHuggingFace","generateWithLocalAPI","error","console","Error","API_KEY","process","env","REACT_APP_OPENAI_API_KEY","systemMessage","recipes","length","files","userMessage","buildPromptWithContext","response","post","messages","role","content","max_tokens","temperature","headers","data","choices","message","REACT_APP_HUGGINGFACE_API_KEY","fullPrompt","inputs","generated_text","contextMessage","slice","forEach","recipe","index","title","difficulty","ingredients","split","join","file","name","type","generateMockResponse","promptLower","toLowerCase","includes","recipeNames","map","r","defaultResponses","Math","floor","random"],"sources":["C:/Users/A/Desktop/oid model/recipe-llm-app/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// Configuration\r\nconst API_CONFIG = {\r\n  openai: {\r\n    url: 'https://api.openai.com/v1/chat/completions',\r\n    model: 'gpt-3.5-turbo'\r\n  },\r\n  huggingface: {\r\n    url: 'https://api-inference.huggingface.co/models/google/flan-t5-xxl',\r\n  },\r\n  local: {\r\n    url: 'http://localhost:5000/api/generate',\r\n  }\r\n};\r\n\r\n// Choose which API to use (you can make this configurable)\r\nconst CURRENT_API = 'openai'; // Change to 'huggingface' or 'local' as needed\r\n\r\n/**\r\n * Generates a recipe response using the selected API\r\n */\r\nexport const generateRecipeResponse = async (prompt, context) => {\r\n  try {\r\n    switch (CURRENT_API) {\r\n      case 'openai':\r\n        return await generateWithOpenAI(prompt, context);\r\n      case 'huggingface':\r\n        return await generateWithHuggingFace(prompt, context);\r\n      case 'local':\r\n        return await generateWithLocalAPI(prompt, context);\r\n      default:\r\n        return await generateWithOpenAI(prompt, context);\r\n    }\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    throw new Error('Failed to generate response. Please check your API configuration.');\r\n  }\r\n};\r\n\r\n/**\r\n * OpenAI API integration\r\n */\r\nconst generateWithOpenAI = async (prompt, context) => {\r\n  // Your OpenAI API key should be stored in environment variables\r\n  const API_KEY = process.env.REACT_APP_OPENAI_API_KEY;\r\n  \r\n  if (!API_KEY) {\r\n    throw new Error('OpenAI API key not configured. Please add REACT_APP_OPENAI_API_KEY to your environment variables.');\r\n  }\r\n\r\n  const systemMessage = `You are a helpful recipe assistant. You have access to:\r\n  - ${context.recipes.length} recipes in the user's collection\r\n  - ${context.files.length} uploaded files\r\n  \r\n  Provide helpful, concise responses about cooking, recipes, and food preparation.`;\r\n\r\n  const userMessage = buildPromptWithContext(prompt, context);\r\n\r\n  const response = await axios.post(\r\n    API_CONFIG.openai.url,\r\n    {\r\n      model: API_CONFIG.openai.model,\r\n      messages: [\r\n        { role: 'system', content: systemMessage },\r\n        { role: 'user', content: userMessage }\r\n      ],\r\n      max_tokens: 500,\r\n      temperature: 0.7\r\n    },\r\n    {\r\n      headers: {\r\n        'Authorization': `Bearer ${API_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n  );\r\n\r\n  return response.data.choices[0].message.content;\r\n};\r\n\r\n/**\r\n * Hugging Face API integration\r\n */\r\nconst generateWithHuggingFace = async (prompt, context) => {\r\n  const API_KEY = process.env.REACT_APP_HUGGINGFACE_API_KEY;\r\n  \r\n  if (!API_KEY) {\r\n    throw new Error('Hugging Face API key not configured.');\r\n  }\r\n\r\n  const fullPrompt = buildPromptWithContext(prompt, context);\r\n  \r\n  const response = await axios.post(\r\n    API_CONFIG.huggingface.url,\r\n    { inputs: fullPrompt },\r\n    {\r\n      headers: {\r\n        'Authorization': `Bearer ${API_KEY}`,\r\n        'Content-Type': 'application/json'\r\n      }\r\n    }\r\n  );\r\n\r\n  return response.data[0].generated_text;\r\n};\r\n\r\n/**\r\n * Local API integration (for self-hosted models)\r\n */\r\nconst generateWithLocalAPI = async (prompt, context) => {\r\n  const fullPrompt = buildPromptWithContext(prompt, context);\r\n  \r\n  const response = await axios.post(API_CONFIG.local.url, {\r\n    prompt: fullPrompt,\r\n    context: context\r\n  });\r\n\r\n  return response.data.response;\r\n};\r\n\r\n/**\r\n * Builds a comprehensive prompt with context from recipes and files\r\n */\r\nconst buildPromptWithContext = (prompt, context) => {\r\n  let contextMessage = `User question: ${prompt}\\n\\n`;\r\n  \r\n  // Add recipe context\r\n  if (context.recipes.length > 0) {\r\n    contextMessage += \"Available recipes:\\n\";\r\n    context.recipes.slice(0, 3).forEach((recipe, index) => {\r\n      contextMessage += `${index + 1}. ${recipe.title} (${recipe.difficulty})\\n`;\r\n      contextMessage += `   Ingredients: ${recipe.ingredients.split('\\n').slice(0, 3).join(', ')}...\\n`;\r\n    });\r\n    contextMessage += \"\\n\";\r\n  }\r\n  \r\n  // Add file context\r\n  if (context.files.length > 0) {\r\n    contextMessage += \"Uploaded files:\\n\";\r\n    context.files.slice(0, 5).forEach(file => {\r\n      contextMessage += `- ${file.name} (${file.type})\\n`;\r\n    });\r\n  }\r\n  \r\n  return contextMessage;\r\n};\r\n\r\n/**\r\n * Fallback mock responses for development/demo\r\n */\r\nexport const generateMockResponse = (prompt, context) => {\r\n  // Enhanced mock responses based on prompt content\r\n  const promptLower = prompt.toLowerCase();\r\n  \r\n  if (promptLower.includes('healthy') || promptLower.includes('diet')) {\r\n    return \"For healthier recipes, I recommend:\\n\\n1. Use olive oil instead of butter\\n2. Replace white flour with whole wheat\\n3. Add more vegetables to increase fiber\\n4. Reduce sugar by 25% and add spices like cinnamon\\n5. Bake instead of fry when possible\\n\\nWould you like me to modify a specific recipe?\";\r\n  }\r\n  \r\n  if (promptLower.includes('quick') || promptLower.includes('fast') || promptLower.includes('easy')) {\r\n    return \"Here are some quick recipe ideas:\\n\\n• 15-minute pasta aglio e olio: garlic, olive oil, parsley, red pepper flakes\\n• 10-minute omelette with leftover vegetables\\n• 5-minute avocado toast with cherry tomatoes\\n• 20-minute stir-fry with pre-cut vegetables and tofu/chicken\\n\\nI can help you adapt any of your recipes to be quicker!\";\r\n  }\r\n  \r\n  if (promptLower.includes('vegetarian') || promptLower.includes('vegan')) {\r\n    return \"For vegetarian/vegan options:\\n\\n• Replace meat with mushrooms, lentils, or tofu\\n• Use plant-based milk in baking\\n• Nutritional yeast adds cheesy flavor without dairy\\n• Aquafaba (chickpea liquid) can replace eggs in some recipes\\n\\nI'd be happy to help convert any of your recipes!\";\r\n  }\r\n  \r\n  if (promptLower.includes('ingredient') || promptLower.includes('substitut')) {\r\n    return \"Common ingredient substitutions:\\n\\n• Buttermilk: 1 cup milk + 1 tbsp lemon juice/vinegar\\n• Baking powder: 1/4 tsp baking soda + 1/2 tsp cream of tartar\\n• Brown sugar: 1 cup white sugar + 1-2 tbsp molasses\\n• Tomato paste: ketchup (use 2x amount) or tomato sauce (reduce other liquids)\\n• Fresh herbs: use 1/3 amount of dried herbs\\n\\nWhat specific ingredient do you need to substitute?\";\r\n  }\r\n  \r\n  // Context-aware responses\r\n  if (context.recipes.length > 0) {\r\n    const recipeNames = context.recipes.map(r => r.title).join(', ');\r\n    return `I see you have recipes for: ${recipeNames}. I can help you:\\n\\n• Modify these recipes for dietary needs\\n• Suggest similar recipes\\n• Create shopping lists\\n• Adjust cooking times or methods\\n\\nWhat would you like to know about your recipes?`;\r\n  }\r\n  \r\n  // Default helpful responses\r\n  const defaultResponses = [\r\n    \"I'd be happy to help with your cooking questions! What specific recipe or technique are you interested in?\",\r\n    \"I can assist with recipe suggestions, cooking techniques, ingredient substitutions, and more. What would you like to know?\",\r\n    \"As your recipe assistant, I can help you plan meals, adjust recipes, or solve cooking challenges. What do you need help with today?\",\r\n    \"I notice you haven't added any recipes yet. I can help you create new recipes or suggest ideas based on ingredients you have!\",\r\n    \"Let me know what you'd like to cook, and I'll help you with recipes, techniques, and tips to make it successful!\"\r\n  ];\r\n  \r\n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}