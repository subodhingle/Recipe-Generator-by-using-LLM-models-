{"ast":null,"code":"// src/services/api.js\nimport axios from 'axios';\n\n// API configurations\nconst API_CONFIG = {\n  gemini: {\n    name: 'Google Gemini',\n    url: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',\n    key: process.env.REACT_APP_GEMINI_API_KEY\n  },\n  huggingface: {\n    name: 'HuggingFace',\n    url: 'https://api-inference.huggingface.co/models',\n    models: {\n      recipe: 'microsoft/DialoGPT-medium'\n    }\n  },\n  deepinfra: {\n    name: 'DeepInfra',\n    url: 'https://api.deepinfra.com/v1/openai/chat/completions',\n    models: {\n      recipe: 'mistralai/Mistral-7B-Instruct-v0.1'\n    }\n  }\n};\n\n// Get current API configuration\nconst getApiConfig = () => {\n  const apiType = process.env.REACT_APP_API_TYPE || 'gemini';\n  return API_CONFIG[apiType] || API_CONFIG.gemini;\n};\n\n/**\r\n * Generates a recipe response using the configured API\r\n */\nexport const generateRecipeResponse = async (prompt, context) => {\n  try {\n    const apiConfig = getApiConfig();\n    const apiType = process.env.REACT_APP_API_TYPE || 'gemini';\n    switch (apiType) {\n      case 'gemini':\n        return await generateWithGemini(prompt, context);\n      case 'huggingface':\n        return await generateWithHuggingFace(prompt, context);\n      case 'deepinfra':\n        return await generateWithDeepInfra(prompt, context);\n      default:\n        return await generateWithGemini(prompt, context);\n    }\n  } catch (error) {\n    console.error('API Error:', error);\n    return generateMockResponse(prompt, context);\n  }\n};\n\n/**\r\n * Google Gemini API integration\r\n */\nconst generateWithGemini = async (prompt, context) => {\n  const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n  if (!API_KEY) {\n    console.log('Gemini API key not found, using mock response');\n    return generateMockResponse(prompt, context);\n  }\n  try {\n    var _context$recipes, _context$files, _response$data, _response$data$candid, _response$data$candid2, _response$data$candid3, _response$data$candid4, _response$data$candid5;\n    const systemPrompt = `You are a helpful recipe assistant. You have access to:\n    - ${((_context$recipes = context.recipes) === null || _context$recipes === void 0 ? void 0 : _context$recipes.length) || 0} recipes in the user's collection\n    - ${((_context$files = context.files) === null || _context$files === void 0 ? void 0 : _context$files.length) || 0} uploaded files\n    \n    Provide helpful, concise responses about cooking, recipes, and food preparation. \n    Be practical and give specific advice when possible.`;\n    const fullPrompt = `${systemPrompt}\n\n    User question: ${prompt}\n\n    ${buildContextString(context)}`;\n    const response = await axios.post(`${API_CONFIG.gemini.url}?key=${API_KEY}`, {\n      contents: [{\n        parts: [{\n          text: fullPrompt\n        }]\n      }],\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 800,\n        topP: 0.8,\n        topK: 40\n      }\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      timeout: 30000\n    });\n\n    // Extract the response text from Gemini's structure\n    const responseText = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$candid = _response$data.candidates) === null || _response$data$candid === void 0 ? void 0 : (_response$data$candid2 = _response$data$candid[0]) === null || _response$data$candid2 === void 0 ? void 0 : (_response$data$candid3 = _response$data$candid2.content) === null || _response$data$candid3 === void 0 ? void 0 : (_response$data$candid4 = _response$data$candid3.parts) === null || _response$data$candid4 === void 0 ? void 0 : (_response$data$candid5 = _response$data$candid4[0]) === null || _response$data$candid5 === void 0 ? void 0 : _response$data$candid5.text;\n    if (!responseText) {\n      throw new Error('Invalid response format from Gemini API');\n    }\n    return responseText;\n  } catch (error) {\n    var _error$response;\n    console.warn('Gemini API failed:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    return generateMockResponse(prompt, context);\n  }\n};\n\n/**\r\n * Hugging Face API integration (fallback)\r\n */\nconst generateWithHuggingFace = async (prompt, context) => {\n  const API_KEY = process.env.REACT_APP_HUGGINGFACE_API_KEY;\n  const model = 'microsoft/DialoGPT-medium';\n  if (!API_KEY) {\n    return generateMockResponse(prompt, context);\n  }\n  try {\n    const fullPrompt = buildPromptWithContext(prompt, context);\n    const response = await axios.post(`${API_CONFIG.huggingface.url}/${model}`, {\n      inputs: fullPrompt\n    }, {\n      headers: {\n        'Authorization': `Bearer ${API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      timeout: 30000\n    });\n    return response.data.generated_text || 'I apologize, but I had trouble generating a response. Please try again.';\n  } catch (error) {\n    console.warn('HuggingFace API failed:', error.message);\n    return generateMockResponse(prompt, context);\n  }\n};\n\n/**\r\n * Build context string for the prompt\r\n */\nconst buildContextString = context => {\n  let contextString = '';\n\n  // Add recipe context\n  if (context.recipes && context.recipes.length > 0) {\n    contextString += \"Available recipes:\\n\";\n    context.recipes.slice(0, 3).forEach((recipe, index) => {\n      contextString += `${index + 1}. ${recipe.title} (${recipe.difficulty || 'unknown'})\\n`;\n      if (recipe.ingredients) {\n        const ingredients = recipe.ingredients.split('\\n').slice(0, 3).join(', ');\n        contextString += `   Ingredients: ${ingredients}...\\n`;\n      }\n    });\n    contextString += \"\\n\";\n  }\n\n  // Add file context\n  if (context.files && context.files.length > 0) {\n    contextString += \"Uploaded files:\\n\";\n    context.files.slice(0, 5).forEach(file => {\n      contextString += `- ${file.name} (${file.type})\\n`;\n    });\n  }\n  return contextString;\n};\n\n/**\r\n * Build prompt with context (for other APIs)\r\n */\nconst buildPromptWithContext = (prompt, context) => {\n  return `User question: ${prompt}\\n\\n${buildContextString(context)}`;\n};\n\n/**\r\n * Enhanced mock responses\r\n */\nexport const generateMockResponse = (prompt, context) => {\n  const promptLower = prompt.toLowerCase();\n  const hasRecipes = context.recipes && context.recipes.length > 0;\n  if (promptLower.includes('healthy') || promptLower.includes('diet')) {\n    return `For healthier recipes, I recommend:\\n\\n• Use olive oil instead of butter\\n• Replace white flour with whole wheat or almond flour\\n• Add more vegetables to increase fiber and nutrients\\n• Reduce sugar by 25-50% and enhance with spices like cinnamon or vanilla\\n• Bake, grill, or steam instead of frying\\n• Use Greek yogurt instead of sour cream\\n\\n${hasRecipes ? 'I can help modify any of your recipes to be healthier!' : 'Would you like specific healthy recipe ideas?'}`;\n  }\n  if (promptLower.includes('quick') || promptLower.includes('fast') || promptLower.includes('easy')) {\n    return `Quick recipe ideas:\\n\\n• 15-minute pasta with garlic, olive oil, and red pepper flakes\\n• 10-minute omelette with leftover vegetables and cheese\\n• 5-minute avocado toast with cherry tomatoes and everything seasoning\\n• 20-minute stir-fry with pre-cut vegetables and protein\\n• No-cook options: salads, sandwiches, yogurt parfaits\\n\\nI can help you adapt recipes to be quicker or suggest time-saving techniques!`;\n  }\n  if (promptLower.includes('vegetarian') || promptLower.includes('vegan')) {\n    return `Vegetarian/vegan substitutions:\\n\\n• Meat: mushrooms, lentils, tofu, tempeh, or beans\\n• Dairy milk: almond, soy, oat, or coconut milk\\n• Eggs: flax eggs (1 tbsp ground flax + 3 tbsp water), applesauce, or commercial egg replacers\\n• Cheese: nutritional yeast, vegan cheese, or blended cashews\\n• Honey: maple syrup, agave, or date syrup\\n\\nI'd be happy to help convert any recipe to vegetarian or vegan!`;\n  }\n  if (promptLower.includes('ingredient') || promptLower.includes('substitut')) {\n    return `Common ingredient substitutions:\\n\\n• Buttermilk: 1 cup milk + 1 tbsp lemon juice or vinegar (let sit 5 minutes)\\n• Baking powder: 1/4 tsp baking soda + 1/2 tsp cream of tartar\\n• Brown sugar: 1 cup white sugar + 1-2 tbsp molasses\\n• Tomato paste: ketchup (use 2x amount) or tomato sauce (reduce other liquids)\\n• Fresh herbs: use 1/3 amount of dried herbs\\n• Wine: broth with a splash of vinegar\\n\\nWhat specific ingredient do you need to substitute?`;\n  }\n\n  // Default helpful responses\n  const defaultResponses = [`I'd be happy to help with your cooking questions! I can assist with recipes, techniques, substitutions, and more. What would you like to know?`, `As your recipe assistant, I can help you plan meals, adjust recipes, or solve cooking challenges. What do you need help with today?`, `I notice you ${hasRecipes ? `have ${context.recipes.length} recipes` : 'haven\\'t added any recipes yet'}. I can help you create new recipes or suggest ideas based on ingredients you have!`, `Let me know what you'd like to cook, and I'll help you with recipes, techniques, and tips to make it successful!`, `Whether you're making a simple weeknight dinner or an elaborate celebration meal, I'm here to help. What's cooking?`];\n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\n};\n\n// Test function to check API availability\nexport const testAPI = async () => {\n  try {\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY || process.env.REACT_APP_HUGGINGFACE_API_KEY;\n    if (!API_KEY) {\n      return 'mock';\n    }\n    const response = await generateRecipeResponse('Hello, are you working?', {\n      recipes: [],\n      files: []\n    });\n    return response.includes('Sorry') || response.includes('apologize') ? 'mock' : 'api';\n  } catch (error) {\n    return 'mock';\n  }\n};","map":{"version":3,"names":["axios","API_CONFIG","gemini","name","url","key","process","env","REACT_APP_GEMINI_API_KEY","huggingface","models","recipe","deepinfra","getApiConfig","apiType","REACT_APP_API_TYPE","generateRecipeResponse","prompt","context","apiConfig","generateWithGemini","generateWithHuggingFace","generateWithDeepInfra","error","console","generateMockResponse","API_KEY","log","_context$recipes","_context$files","_response$data","_response$data$candid","_response$data$candid2","_response$data$candid3","_response$data$candid4","_response$data$candid5","systemPrompt","recipes","length","files","fullPrompt","buildContextString","response","post","contents","parts","text","generationConfig","temperature","maxOutputTokens","topP","topK","headers","timeout","responseText","data","candidates","content","Error","_error$response","warn","message","REACT_APP_HUGGINGFACE_API_KEY","model","buildPromptWithContext","inputs","generated_text","contextString","slice","forEach","index","title","difficulty","ingredients","split","join","file","type","promptLower","toLowerCase","hasRecipes","includes","defaultResponses","Math","floor","random","testAPI"],"sources":["C:/Users/A/Desktop/oid model/recipe-llm-app/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\n\r\n// API configurations\r\nconst API_CONFIG = {\r\n  gemini: {\r\n    name: 'Google Gemini',\r\n    url: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',\r\n    key: process.env.REACT_APP_GEMINI_API_KEY\r\n  },\r\n  huggingface: {\r\n    name: 'HuggingFace',\r\n    url: 'https://api-inference.huggingface.co/models',\r\n    models: {\r\n      recipe: 'microsoft/DialoGPT-medium'\r\n    }\r\n  },\r\n  deepinfra: {\r\n    name: 'DeepInfra',\r\n    url: 'https://api.deepinfra.com/v1/openai/chat/completions',\r\n    models: {\r\n      recipe: 'mistralai/Mistral-7B-Instruct-v0.1'\r\n    }\r\n  }\r\n};\r\n\r\n// Get current API configuration\r\nconst getApiConfig = () => {\r\n  const apiType = process.env.REACT_APP_API_TYPE || 'gemini';\r\n  return API_CONFIG[apiType] || API_CONFIG.gemini;\r\n};\r\n\r\n/**\r\n * Generates a recipe response using the configured API\r\n */\r\nexport const generateRecipeResponse = async (prompt, context) => {\r\n  try {\r\n    const apiConfig = getApiConfig();\r\n    const apiType = process.env.REACT_APP_API_TYPE || 'gemini';\r\n    \r\n    switch (apiType) {\r\n      case 'gemini':\r\n        return await generateWithGemini(prompt, context);\r\n      case 'huggingface':\r\n        return await generateWithHuggingFace(prompt, context);\r\n      case 'deepinfra':\r\n        return await generateWithDeepInfra(prompt, context);\r\n      default:\r\n        return await generateWithGemini(prompt, context);\r\n    }\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    return generateMockResponse(prompt, context);\r\n  }\r\n};\r\n\r\n/**\r\n * Google Gemini API integration\r\n */\r\nconst generateWithGemini = async (prompt, context) => {\r\n  const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\r\n  \r\n  if (!API_KEY) {\r\n    console.log('Gemini API key not found, using mock response');\r\n    return generateMockResponse(prompt, context);\r\n  }\r\n\r\n  try {\r\n    const systemPrompt = `You are a helpful recipe assistant. You have access to:\r\n    - ${context.recipes?.length || 0} recipes in the user's collection\r\n    - ${context.files?.length || 0} uploaded files\r\n    \r\n    Provide helpful, concise responses about cooking, recipes, and food preparation. \r\n    Be practical and give specific advice when possible.`;\r\n\r\n    const fullPrompt = `${systemPrompt}\r\n\r\n    User question: ${prompt}\r\n\r\n    ${buildContextString(context)}`;\r\n\r\n    const response = await axios.post(\r\n      `${API_CONFIG.gemini.url}?key=${API_KEY}`,\r\n      {\r\n        contents: [\r\n          {\r\n            parts: [\r\n              {\r\n                text: fullPrompt\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        generationConfig: {\r\n          temperature: 0.7,\r\n          maxOutputTokens: 800,\r\n          topP: 0.8,\r\n          topK: 40\r\n        }\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        timeout: 30000\r\n      }\r\n    );\r\n\r\n    // Extract the response text from Gemini's structure\r\n    const responseText = response.data?.candidates?.[0]?.content?.parts?.[0]?.text;\r\n    \r\n    if (!responseText) {\r\n      throw new Error('Invalid response format from Gemini API');\r\n    }\r\n\r\n    return responseText;\r\n  } catch (error) {\r\n    console.warn('Gemini API failed:', error.response?.data || error.message);\r\n    return generateMockResponse(prompt, context);\r\n  }\r\n};\r\n\r\n/**\r\n * Hugging Face API integration (fallback)\r\n */\r\nconst generateWithHuggingFace = async (prompt, context) => {\r\n  const API_KEY = process.env.REACT_APP_HUGGINGFACE_API_KEY;\r\n  const model = 'microsoft/DialoGPT-medium';\r\n  \r\n  if (!API_KEY) {\r\n    return generateMockResponse(prompt, context);\r\n  }\r\n\r\n  try {\r\n    const fullPrompt = buildPromptWithContext(prompt, context);\r\n    \r\n    const response = await axios.post(\r\n      `${API_CONFIG.huggingface.url}/${model}`,\r\n      { inputs: fullPrompt },\r\n      {\r\n        headers: {\r\n          'Authorization': `Bearer ${API_KEY}`,\r\n          'Content-Type': 'application/json'\r\n        },\r\n        timeout: 30000\r\n      }\r\n    );\r\n\r\n    return response.data.generated_text || 'I apologize, but I had trouble generating a response. Please try again.';\r\n  } catch (error) {\r\n    console.warn('HuggingFace API failed:', error.message);\r\n    return generateMockResponse(prompt, context);\r\n  }\r\n};\r\n\r\n/**\r\n * Build context string for the prompt\r\n */\r\nconst buildContextString = (context) => {\r\n  let contextString = '';\r\n  \r\n  // Add recipe context\r\n  if (context.recipes && context.recipes.length > 0) {\r\n    contextString += \"Available recipes:\\n\";\r\n    context.recipes.slice(0, 3).forEach((recipe, index) => {\r\n      contextString += `${index + 1}. ${recipe.title} (${recipe.difficulty || 'unknown'})\\n`;\r\n      if (recipe.ingredients) {\r\n        const ingredients = recipe.ingredients.split('\\n').slice(0, 3).join(', ');\r\n        contextString += `   Ingredients: ${ingredients}...\\n`;\r\n      }\r\n    });\r\n    contextString += \"\\n\";\r\n  }\r\n  \r\n  // Add file context\r\n  if (context.files && context.files.length > 0) {\r\n    contextString += \"Uploaded files:\\n\";\r\n    context.files.slice(0, 5).forEach(file => {\r\n      contextString += `- ${file.name} (${file.type})\\n`;\r\n    });\r\n  }\r\n  \r\n  return contextString;\r\n};\r\n\r\n/**\r\n * Build prompt with context (for other APIs)\r\n */\r\nconst buildPromptWithContext = (prompt, context) => {\r\n  return `User question: ${prompt}\\n\\n${buildContextString(context)}`;\r\n};\r\n\r\n/**\r\n * Enhanced mock responses\r\n */\r\nexport const generateMockResponse = (prompt, context) => {\r\n  const promptLower = prompt.toLowerCase();\r\n  const hasRecipes = context.recipes && context.recipes.length > 0;\r\n  \r\n  if (promptLower.includes('healthy') || promptLower.includes('diet')) {\r\n    return `For healthier recipes, I recommend:\\n\\n• Use olive oil instead of butter\\n• Replace white flour with whole wheat or almond flour\\n• Add more vegetables to increase fiber and nutrients\\n• Reduce sugar by 25-50% and enhance with spices like cinnamon or vanilla\\n• Bake, grill, or steam instead of frying\\n• Use Greek yogurt instead of sour cream\\n\\n${hasRecipes ? 'I can help modify any of your recipes to be healthier!' : 'Would you like specific healthy recipe ideas?'}`;\r\n  }\r\n  \r\n  if (promptLower.includes('quick') || promptLower.includes('fast') || promptLower.includes('easy')) {\r\n    return `Quick recipe ideas:\\n\\n• 15-minute pasta with garlic, olive oil, and red pepper flakes\\n• 10-minute omelette with leftover vegetables and cheese\\n• 5-minute avocado toast with cherry tomatoes and everything seasoning\\n• 20-minute stir-fry with pre-cut vegetables and protein\\n• No-cook options: salads, sandwiches, yogurt parfaits\\n\\nI can help you adapt recipes to be quicker or suggest time-saving techniques!`;\r\n  }\r\n  \r\n  if (promptLower.includes('vegetarian') || promptLower.includes('vegan')) {\r\n    return `Vegetarian/vegan substitutions:\\n\\n• Meat: mushrooms, lentils, tofu, tempeh, or beans\\n• Dairy milk: almond, soy, oat, or coconut milk\\n• Eggs: flax eggs (1 tbsp ground flax + 3 tbsp water), applesauce, or commercial egg replacers\\n• Cheese: nutritional yeast, vegan cheese, or blended cashews\\n• Honey: maple syrup, agave, or date syrup\\n\\nI'd be happy to help convert any recipe to vegetarian or vegan!`;\r\n  }\r\n  \r\n  if (promptLower.includes('ingredient') || promptLower.includes('substitut')) {\r\n    return `Common ingredient substitutions:\\n\\n• Buttermilk: 1 cup milk + 1 tbsp lemon juice or vinegar (let sit 5 minutes)\\n• Baking powder: 1/4 tsp baking soda + 1/2 tsp cream of tartar\\n• Brown sugar: 1 cup white sugar + 1-2 tbsp molasses\\n• Tomato paste: ketchup (use 2x amount) or tomato sauce (reduce other liquids)\\n• Fresh herbs: use 1/3 amount of dried herbs\\n• Wine: broth with a splash of vinegar\\n\\nWhat specific ingredient do you need to substitute?`;\r\n  }\r\n  \r\n  // Default helpful responses\r\n  const defaultResponses = [\r\n    `I'd be happy to help with your cooking questions! I can assist with recipes, techniques, substitutions, and more. What would you like to know?`,\r\n    `As your recipe assistant, I can help you plan meals, adjust recipes, or solve cooking challenges. What do you need help with today?`,\r\n    `I notice you ${hasRecipes ? `have ${context.recipes.length} recipes` : 'haven\\'t added any recipes yet'}. I can help you create new recipes or suggest ideas based on ingredients you have!`,\r\n    `Let me know what you'd like to cook, and I'll help you with recipes, techniques, and tips to make it successful!`,\r\n    `Whether you're making a simple weeknight dinner or an elaborate celebration meal, I'm here to help. What's cooking?`\r\n  ];\r\n  \r\n  return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];\r\n};\r\n\r\n// Test function to check API availability\r\nexport const testAPI = async () => {\r\n  try {\r\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY || process.env.REACT_APP_HUGGINGFACE_API_KEY;\r\n    \r\n    if (!API_KEY) {\r\n      return 'mock';\r\n    }\r\n    \r\n    const response = await generateRecipeResponse('Hello, are you working?', { recipes: [], files: [] });\r\n    return response.includes('Sorry') || response.includes('apologize') ? 'mock' : 'api';\r\n  } catch (error) {\r\n    return 'mock';\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}